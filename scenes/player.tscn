[gd_scene load_steps=5 format=2]

[ext_resource path="res://scenes/vectorconvertor.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody

const gravity = 98/2
const sprintspeed = 1000
const defspeed = 250
var speed = 250
const jumpspd = 10
const sensetivity = -0.005
var velocity = Vector3()
var mousemotion
var tile = 0

onready var prevpos = translation
onready var cam = $offset/primarycam

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	pass # Replace with function body.

func _process(_delta):
	if Input.is_action_just_pressed(\"ui_cancel\"):
		if Input.get_mouse_mode() == Input.MOUSE_MODE_VISIBLE:
			Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
		else:
			Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	
	if Input.is_action_just_pressed(\"flashlight\"):
		$offset/primarycam/SpotLight.visible = !$offset/primarycam/SpotLight.visible
	

func _physics_process(delta):
	var pos = translation
	var up = pos.normalized()
	
	if mousemotion:
		cam.rotation.x = clamp(cam.rotation.x + (mousemotion.y * sensetivity), deg2rad(0), deg2rad(180))
		$offset.rotate_z(mousemotion.x*sensetivity)
		pass
	mousemotion = null
	
	speed = (sprintspeed if Input.is_action_pressed(\"speedup\") else defspeed)*scale.x
	
	velocity = $vectorconvertor.vector_global_to_local(Transform($offset.global_transform.basis, Vector3()), velocity)
	
	velocity.z += jumpspd * int(Input.is_action_pressed(\"jump\")) * int(is_on_floor()) 
	velocity.z -= gravity * delta
	
	var move = Vector3()
	move.y = -int(Input.is_action_pressed(\"backward\"))+int(Input.is_action_pressed(\"forward\"))
	move.x = int(Input.is_action_pressed(\"straferight\"))-int(Input.is_action_pressed(\"strafeleft\"))
	
	velocity.y = move.y * speed * delta
	velocity.x = move.x * speed * delta
	
	velocity = $vectorconvertor.vector_local_to_global(Transform($offset.global_transform.basis, Vector3()), velocity)
	
	velocity = move_and_slide(velocity, up, true)
	
	transform = transform.orthonormalized()
	if transform.basis.y.normalized().cross(-up) != Vector3():
		look_at(Vector3(0, 0, 0), transform.basis.y)
	elif transform.basis.x.normalized().cross(-up) != Vector3():
		look_at(Vector3(0, 0, 0), transform.basis.x)
	
	pass

func _input(event):
	
	if event is InputEventMouseMotion and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		mousemotion = event.relative
		pass
	
	
"

[sub_resource type="CapsuleMesh" id=11]
radius = 0.5

[sub_resource type="CapsuleShape" id=12]
radius = 0.5

[node name="player" type="KinematicBody"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0 )
script = SubResource( 1 )

[node name="offset" type="Spatial" parent="."]

[node name="primarycam" type="Camera" parent="offset"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, -6.55671e-08, 1.5 )
current = true
fov = 90.0
far = 5000.0

[node name="placeablock" type="RayCast" parent="offset/primarycam"]
enabled = true
cast_to = Vector3( 0, 0, -10 )

[node name="SpotLight" type="SpotLight" parent="offset/primarycam"]
shadow_enabled = true
spot_range = 50.0

[node name="shadows" type="MeshInstance" parent="offset"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -4.37114e-08, 1 )
mesh = SubResource( 11 )
material/0 = null

[node name="collision" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -4.37114e-08, 1 )
shape = SubResource( 12 )

[node name="vectorconvertor" parent="." instance=ExtResource( 1 )]
